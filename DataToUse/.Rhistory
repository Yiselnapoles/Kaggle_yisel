setwd("/Volumes/YISEL/TFG/PRÁCTICA")
load("/Volumes/YISEL/TFG/PRÁCTICA/tbl_sales_with_clients_alimentacion.RData")
View(tbl_sales_with_clients_alimentacion)
datos = tbl_sales_with_clients_alimentacion
datos
head(datos)
tiempo = datos$transaction_date
tiempo
tiempo[,1]
cantidad = datos$quantity
cantidad
producto = datos$item_id
producto
length(cantidad)
length(producto)
tiempo
ts(cantidad)
ts(cantidad, start = tiempo)
ts(cantidad, start = c(2013,1,2))
ts(cantidad, start = c(2013,1))
ts(cantidad, start = c(2013,1,2))
serie_temporal = ts(cantidad, start = c(2013,1,2))
serie_temporal
plot(serie_temporal)
serie_temporal = ts(cantidad, start = c(2013,1,2), frequency = 24)
serie_temporal
serie = c(tiempo, cantidad)
serie
serie = data.frame(tiempo, cantidad)
serie
load("/Volumes/YISEL/TFG/PRÁCTICA/tbl_sales_with_clients_alimentacion.RData")
View(tbl_sales_with_clients_alimentacion)
datos = tbl_sales_with_clients_alimentacion
install.packages("MCMCpack")
require(MCMCpack)
tiempo = datos$transaction_date
tiempo
cantidad = datos$quantity
cantidad
serie = data.frame(tiempo, cantidad)
serie
serie_cantidad = ts(cantidad, start = c(2013,1,2))
serie_cantidad
serie_cantidad = ts(cantidad, start = c(2013,1,2), frequency = 12)
serie_cantidad
serie_cantidad = ts(cantidad, start = c(2013,1,2), frequency = 24)
serie_cantidad
serie_cantidad = ts(cantidad, start = c(2013,1,2))
serie_cantidad
plot(serie_cantidad)
serie_cantidad = ts(serie, start = c(2013,1,2))
serie_cantidad
serie_cantidad = ts(serie, start = c(2013,1))
serie_cantidad
tiempo
length(tiempo == "2013-01-02 00:00:00")
length(tiempo = "2013-01-02 00:00:00")
length(tiempo["2013-01-02 00:00:00"])
length(tiempo[tiempo == "2013-01-02 00:00:00"])
serie_cantidad = ts(serie, start = c(2013,1), end = c(2013,1))
serie_cantidad = ts(serie, start = c(2013,1))
serie_cantidad
serie = cbind(tiempo, cantidad)
serie
serie_cantidad = ts(serie, start = c(2013,1))
serie_cantidad
plot(serie_cantidad)
serie = data.frame(tiempo, cantidad)
serie
serie = data.frame(tiempo, cantidad)
head(serie)
serie$tiempo
install.packages("tidyverse")
library(tidyverse)
tiempo = datos$transaction_date
tiempo
datos <- datos %>%
separate(transaction_date, into = c("Fecha", "Hora"), sep = 4)
View(datos)
datos <- datos %>%
separate(transaction_date, into = c("Fecha", "Hora"), sep = 10)
datos <- datos %>%
separate(transaction_date, into = c("Fecha", "Hora"), sep = 9)
datos <- datos %>%
separate(transaction_date, into = c("Fecha", "Hora"), sep = 4)
load("/Volumes/YISEL/TFG/PRÁCTICA/tbl_sales_with_clients_alimentacion.RData")
View(tbl_sales_with_clients_alimentacion)
datos = tbl_sales_with_clients_alimentacion
datos <- datos %>%
separate(transaction_date, into = c("Fecha", "Hora"), sep = 10)
View(datos)
tiempo = datos$Fecha
tiempo
cantidad = datos$quantity
cantidad
producto = datos$item_id
producto
serie = data.frame(tiempo, cantidad)
head(serie)
serie_cantidad = ts(serie, start = c(2013,1))
serie_cantidad
plot(serie_cantidad[,2])
tiempo
tiempo_dias = group_by(tiempo)
serie_cantidad = ts(serie[,2], start = c(2013,1))
serie_cantidad
head(serie_cantidad)
plot(serie_cantidad)
tiempo
serie
serie[,.(count=.N),by=tiempo]
apply(serie,cantidad,sum)
apply(serie,serie$cantidad,sum)
table(serie)
table(serie$cantidad)
setwd("~/Downloads/Problema_de_la_asignación")
tbl_sales=tbl_sales_with_clients_alimentacion
attach(tbl_sales)
summary(tbl_sales)
dim(tbl_sales)
tbl_sales_filter=tbl_sales[tbl_sales$quantity>0 & tbl_sales$price>0,]
summary(tbl_sales_filter$quantity)
summary(tbl_sales_filter$price)
dd <- unique(tbl_sales_filter, length(tbl_sales_filter$price)>5)
length(unique(tbl_sales_filter$price))>5
subset(tbl_sales_filter, price == length(unique(tbl_sales_filter$price))>5, select = item_id)
subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5, select = item_id)
dd <- subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5, select = item_id)
dd
head(dd)
dd <- subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5)
head(dd)
dd <- subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5, select = item_id[1])
dd
item_id[1]
dd <- subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5,
select = c(item_id[1], price))
dd
dd <- subset(tbl_sales_filter, length(unique(tbl_sales_filter$price))>5,
select = item_id)
which(dd[1])
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id[1]))
item_id[1]
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id=670103))
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id==670103))
dd
summary(dd$price)
hist(dd$price)
dd <- subset(tbl_sales_filter, (unique(length(tbl_sales_filter$price))>5 & item_id==670103))
summary(dd$price)
hist(dd$price)
unique(tbl_sales_filter$price)
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id==670103))
dd
unique(dd$price)
dd <- subset(tbl_sales_filter, unique(tbl_sales_filter$price)>5 & item_id==670103)
dd <- subset(tbl_sales_filter, unique(tbl_sales_filter$price)>5)
item_id[1]
dd <- subset(tbl_sales_filter, dim(unique(tbl_sales_filter$price)>5) & item_id == 670103)
dd <- subset(tbl_sales_filter, dim(unique(tbl_sales_filter$price)>5) & item_id == "670103")
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price)>5) & item_id == "670103"))
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price)>5) & item_id == 670103))
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price)>5) & item_id = 670103))
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price))>5 & item_id = 670103))
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id==670103))
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price))>5 & item_id == 670103))
dd
dd <- subset(tbl_sales_filter, (dim(unique(tbl_sales_filter$price))>1 & item_id == 670103))
dd
dim(unique(tbl_sales_filter$price))>1
dim(unique(tbl_sales_filter$price))
length(unique(tbl_sales_filter$price))
length(unique(tbl_sales_filter$price))>5
length(unique(tbl_sales_filter$price)>5)
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price)>5) & item_id == 670103))
dd
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id == 670103))
dd
dd <- subset(tbl_sales_filter, (length(unique(tbl_sales_filter$price))>5 & item_id == 670103),
select = c(item_id, price))
dd
tbl_sales_filter$price
dd <- subset(tbl_sales_filter, (item_id == 670103 & length(unique(tbl_sales_filter$price))>5),
select = c(item_id, price))
dd
length(unique(tbl_sales_filter$price))
item_id == 670103 & length(unique(tbl_sales_filter$price))
dd <- subset(tbl_sales_filter, (item_id == 670103 & price = length(unique(tbl_sales_filter$price))>5),
select = c(item_id, price))
dd <- subset(tbl_sales_filter, (item_id == 670103 & length(unique(price))>5),
select = c(item_id, price))
dd
dd <- subset(tbl_sales_filter, (item_id == 670103),
select = c(item_id, price))
dd
dd <- subset(tbl_sales_filter, (length(unique(price))>5),
select = c(item_id, price))
dd
dd <- subset(tbl_sales_filter, (item_id == "670103"  & length(unique(price))>5),
select = c(item_id, price))
dd
dd <- subset(tbl_sales_filter, (length(unique(price))>5),
select = c(item_id, price))
item_id[1]
dd <- subset(dd, item_id == "670103")
dd
dd <- subset(tbl_sales_filter, (length(unique(price))>5),
select = c(item_id, price))
dd
dd <- subset(dd, item_id == "670103")
dd
dd <- subset(tbl_sales_filter, item_id == "670103")
dd
dd <- subset(dd, (length(unique(price))>5),
select = c(item_id, price))
dd
dd <- subset(tbl_sales_filter, item_id == items[1])
items<-unique(tbl_sales$item_id)
dd <- subset(tbl_sales_filter, item_id == items[1])
dd <- subset(dd, (length(unique(price))>5),
select = c(item_id, price))
dd
for (i in 1:3)
{
dd <- subset(tbl_sales_filter, item_id == items[i])
dd <- subset(dd, (length(unique(price))>5),
select = c(item_id, price))
}
dd
unitem <- tbl_sales_filter[tbl_sales_filter$item_id==items[1],]
dd <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
dd
dd>0
length(dd)>0
length(dd)=0
length(dd)==0
unitem <- tbl_sales_filter[tbl_sales_filter$item_id==items[2],]
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- tbl_sales_filter[tbl_sales_filter$item_id==items[3],]
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- tbl_sales_filter[tbl_sales_filter$item_id==items[4],]
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[3])
unitem <- subset(unitem, item_id == items[1])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[3])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[4])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[15])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[35])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
unitem <- subset(unitem, item_id == items[50])
precios_restriccion <- subset(unitem, (length(unique(price))>5),
select = c(item_id, price))
precios_restriccion
ingresos_BIC_hc_mle <- bn.fit(ingresos_BIC_hc_DAG, ingresos_entrenamiento, method = "mle")
ingresos <- read.table("adult.csv", sep = ",", header = T)
head(ingresos)
summary(ingresos)
library(discretization)
library(caret)
library(bnlearn)
summary(ingresos)
datosprueba_discretizados <- mdlp(ingresos[,c(1,8,10)])$Disc.data
# cutp nos dicen los puntos de corte de los intervalos
datosprueba_factor <- sapply(datosprueba_discretizados, factor)
datosprueba_factor <- as.data.frame(datosprueba_factor)
ingresos[,c(1,8)] <- datosprueba_factor
ingresos_discretizado <- ingresos
summary(ingresos_discretizado)
ingresos_discretizado<- as.data.frame(ingresos_discretizado)
ingresos_nb_DAG <- naive.bayes(ingresos_discretizado, "income")
graphviz.plot(ingresos_nb_DAG)
ingresos_nb_mle <- bn.fit(ingresos_nb_DAG, ingresos_discretizado, method = "mle")
ingresos_nb_mle
income_predicha <- predict(ingresos_nb_mle, ingresos_discretizado)
summary(income_predicha)
mean(income_predicha != ingresos_discretizado$income)
set.seed(432512)
índices_validación <-
caret::createDataPartition(ingresos_discretizado$income, p = 2/5)$Resample1
ingresos_validación <- ingresos_discretizado[índices_validación,]
summary(ingresos_validación)
entrenamiento_prueba <- ingresos_discretizado[-índices_validación,]
summary(entrenamiento_prueba)
índices_entrenamiento <-
caret::createDataPartition(entrenamiento_prueba$income, p = 2/3)$Resample1
ingresos_entrenamiento <- entrenamiento_prueba[índices_entrenamiento,]
summary(ingresos_entrenamiento)
ingresos_prueba <- entrenamiento_prueba[-índices_entrenamiento,]
summary(ingresos_prueba)
ingresos_nb_mle <- bn.fit(ingresos_nb_DAG, ingresos_entrenamiento, method = "mle")
ingresos_nb_mle
valores_predichos <- predict(ingresos_nb_mle, ingresos_prueba, prob = TRUE)
error_nb_mle <- mean(valores_predichos != ingresos_prueba$income)
error_nb_mle
set.seed(2386523)
subconjuntos_cv <- caret::createFolds(ingresos_validación$income, k = 9)
for (alpha in c(1, 2, 5, 10, 25, 50)) {
error_medio <-
attr(bn.cv(ingresos_validación, ingresos_nb_DAG,
fit = "bayes", fit.args = list(iss = alpha),
method = "custom-folds",
folds = subconjuntos_cv),"mean")
print(paste("alpha = ", alpha,
"   Error medio = ", error_medio),
sep = "")
}
ingresos_nb_bayes <- bn.fit(ingresos_nb_DAG, ingresos_entrenamiento,
method = "bayes", iss = 10)
ingresos_nb_bayes
error_nb_bayes <-
mean(predict(ingresos_nb_bayes, ingresos_prueba) != ingresos_prueba$income)
error_nb_bayes
ingresos_tan_DAG <- tree.bayes(ingresos_entrenamiento, "income")
graphviz.plot(ingresos_tan_DAG)
ingresos_tan_mle <- bn.fit(ingresos_tan_DAG, ingresos_entrenamiento, method = "mle")
ingresos_tan_mle
error_tan_mle <-
mean(predict(ingresos_tan_mle, ingresos_prueba) != ingresos_prueba$income)
error_tan_mle
sink("BIC_hc.txt")  # Redirige la salida al fichero indicado
ingresos_BIC_hc_DAG <- hc(ingresos_entrenamiento, score = "bic", debug = TRUE)
sink()  # Redirige la salida a la consola
graphviz.plot(ingresos_BIC_hc_DAG)
ingresos_BIC_hc_mle <- bn.fit(ingresos_BIC_hc_DAG, ingresos_entrenamiento, method = "mle")
ingresos_BIC_hc_mle
install.packages("foreign")
library(foreign)
install.packages("compiler")
if (!require("compiler")) { install.packages("compiler"); require("compiler"); }
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
library(xlsx)
install.packages("rJava")
install.packages("xlsxjars")
library(rJava)
library(xlsxjars)
install.packages("proxy")
library(proxy)
install.packages("data.table")
library(data.table)
abono <- function(file, nombre_finca, area){
file<-file[, c("TIME", names(file)[grep(nombre_finca, names(file))]), with=F]
names(file)<-c("TIME", paste("ABONO", substr(names(file), nchar(names(file))-1, nchar(names(file)))[2:4],sep=""))
file[ year(TIME)>2014, ABONO_N:= ABONO_N / area]
file[ year(TIME)>2014, ABONO_P:= ABONO_P / area]
file[ year(TIME)>2014, ABONO_K:= ABONO_K / area]
file[ABONO_N<0, ABONO_N:=0]
file[ABONO_P<0, ABONO_P:=0]
file[ABONO_K<0, ABONO_K:=0]
file$SPOTID_FINCA<-toupper (nombre_finca)
file$SPOTID_PTO <- "TOTAL"
return (file)
}
3*56.2
786/23
786%/%23
library(Ecdat)
install.packages("Ecdat")
A <- data.frame(x = c(1, 2, 3), y <- c(-1, 0, 1))
A
View(A)
within(A, z <- x*y)
View(A)
6 + 2 * 9 / 3
(6 + 2 * 9) / 3
(6 + 2 * 9)/ 3 + 3
(6 + 2 * 9)/3 + 3
(6 + 2 * 9)/3
length(c(1,2,3,4))
A[ , 1]
A$x
6 + 2 * 9 / 3
(6 + 2 * 9)/ 3 + 3
Respuesta 2
(6 + 2 * 9) / 3
set.seed(1234567)
x <- rnorm(100)
hist(x)
hist(x,freq = FALSE)
curve(dnorm(x), add = T)
hist(x,breaks = -12:12/4, freq = FALSE)
curve(dnorm(x), add = T)
hist(x,breaks = -12:12/4, freq = FALSE)
curve(dnorm(x), add = T)
hist(x,breaks = -3:3, freq = FALSE)
curve(dnorm(x), add = T)
x <- rnorm(100)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
x <- rnorm(100)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
x <- rnorm(100)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
plot(d1)
plot(d2)
plot(d3)
plot(d4)
plot(d5)
plot(d6)
x <- rnorm(100)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
plot(d1)
plot(d2)
plot(d3)
plot(d4)
plot(d5)
plot(d6)
x <- rnorm(1000)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
plot(d1)
plot(d2)
plot(d3)
plot(d4)
plot(d5)
plot(d6)
x <- rnorm(1000)
d1 <- density(x, kernel = "gaussian")
d2 <- density(x, kernel = "epanechnikov")
d3 <- density(x, kernel = "triangular")
d4 <- density(x, kernel = "rectangular")
d5 <- density(x, kernel = "biweight")
d6 <- density(x, kernel = "cosine")
layout(matrix(1:6, ncol = 3))
plot(d1)
plot(d2)
plot(d3)
plot(d4)
plot(d5)
plot(d6)
str(d1)
x <- rnorm(1000)
d1 <- density(x, bw = 0.05) # por defecto es gausiana que es parecida a epanechnikov
d2 <- density(x, bw = 0.1)
d3 <- density(x, bw = 0.2)
d4 <- density(x, bw = 0.3)
d5 <- density(x, bw = 0.4)
d6 <- density(x, bw = 0.5)
layout(matrix(1:6, ncol = 3))
plot(d1)
plot(d2)
plot(d3)
plot(d4)
plot(d5)
plot(d6)
setwd("~/Desktop/Kaggle/DataToUse")
